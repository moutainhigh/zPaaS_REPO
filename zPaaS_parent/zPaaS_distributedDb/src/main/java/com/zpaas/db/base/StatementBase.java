package com.zpaas.db.base;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.zpaas.db.common.ConnectionManager;
import com.zpaas.db.distribute.SqlExecPlan;
import com.zpaas.db.sql.SQLType;

/**
 * 实现Statement接口的基类
 * @author zjy
 * @date 2014年6月23日 上午9:53:47 
 * @version V1.0
 */
public abstract class StatementBase implements Statement {
	public static final Logger log = LoggerFactory.getLogger(StatementBase.class);
	
	private boolean closed = false;
	private boolean closeOnCompletion = false;
	private int maxRows = 0;
	private int queryTimeout = 0;
	protected int updateCount = -1;
	private boolean moreResults = false;
	private int fetchSize = 0;
	private int resultSetConcurrency = -1;
	private int resultSetType = -1;
	private int resultSetHoldability = -1;
	
	private ResultSet resultSet = null;
	
	protected String dbName;
	protected ConnectionManager manager = null;
	protected List<String> batchSql = null;
	protected SqlExecPlan plan = null;
	private Connection connection = null;
	
	protected abstract void processDbRule(String sql) throws SQLException;
	public abstract Connection getRealConnection(String dbName) throws SQLException;
	public abstract Connection getRealConnection() throws SQLException ;
	
	public Connection getConnection() throws SQLException {
		if(this.isClosed()) {
			return null;
		}
		return connection;
	}
	
	public void setConnection(Connection connection) {
		this.connection = connection;
	}
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		if(this.isClosed()) {
			return null;
		}
		processDbRule(sql);
		Connection conn = getRealConnection(dbName);
		Statement state = conn.createStatement();
		manager.addStatement(state);
		long beginTime = System.currentTimeMillis();
		setResultSet(state.executeQuery(sql));
		long endTime = System.currentTimeMillis();
		if(log.isDebugEnabled()) {
			log.debug("dbName({}) cost {} ms to execute sql: {} ",getDbName(),(endTime-beginTime), sql);
		}
		return getResultSet();
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		if(this.isClosed()) {
			return -1;
		}
		return executeUpdateIntenal(sql, -1, null, null);
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		if(this.isClosed()) {
			return false;
		}
		return executeInternal(sql, -1, null, null);
	}

	public int executeUpdateIntenal(String sql, int autoGeneratedKeys, int[] columnIndexes, 
			String[] columnNames) throws SQLException {
		if(this.isClosed()) {
			return -1;
		}
		this.processDbRule(sql);
		if(log.isDebugEnabled()) {
			log.debug("dbName:{}", getDbName());
		}
		Connection conn = getRealConnection(dbName);
		Statement state = conn.createStatement();
		manager.addStatement(state);
		int result = -1;
		long beginTime = System.currentTimeMillis();
		if(autoGeneratedKeys != -1) {
			result = state.executeUpdate(sql, autoGeneratedKeys);
		}else if(columnIndexes != null) {
			result = state.executeUpdate(sql, columnIndexes);
		}else if(columnNames != null) {
			result = state.executeUpdate(sql, columnNames);
		}else {
			result = state.executeUpdate(sql);
		}
		long endTime = System.currentTimeMillis();
		if(log.isDebugEnabled()) {
			log.debug("dbName({}) cost {} ms to execute sql: {}",getDbName(),(endTime-beginTime), sql);
			log.debug("{} records were updated.", result);
		}
		return result;
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		if(batchSql == null) {
			batchSql = new ArrayList<String>();
		}
		batchSql.add(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		if(batchSql != null) {
			batchSql = null;
		}
	}

	@Override
	public int[] executeBatch() throws SQLException {
		if(this.isClosed()) {
			return null;
		}
		this.processDbRule(null);
		if(log.isDebugEnabled()) {
			log.debug("dbName:" + getDbName());
		}
		Connection conn = getRealConnection(dbName);
		Statement state = conn.createStatement();
		manager.addStatement(state);
		if(batchSql == null || batchSql.size() == 0) {
			return null;
		}
		for(String sql : batchSql) {
			state.addBatch(sql);
		}		
		long beginTime = System.currentTimeMillis();
		int[] result = state.executeBatch();
		long endTime = System.currentTimeMillis();
		if(log.isDebugEnabled()) {
			log.debug("dbName(" + getDbName() + ") cost " + (endTime-beginTime) + " ms to execute batch sql");
			for(String sql : batchSql) {
				log.debug("batch Sql:" + sql);
			}
		}
		return result;
	}

	
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return executeUpdateIntenal(sql, autoGeneratedKeys, null, null);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return executeUpdateIntenal(sql, -1, columnIndexes, null);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return executeUpdateIntenal(sql, -1, null, columnNames);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return executeInternal(sql, autoGeneratedKeys, null, null);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return executeInternal(sql, -1, columnIndexes, null);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return executeInternal(sql, -1, null, columnNames);
	}
	
	public boolean executeInternal(String sql, int autoGeneratedKeys, int[] columnIndexes, 
			String[] columnNames) throws SQLException {
		if(this.isClosed()) {
			return false;
		}
		String sqlType = SQLType.getSqlType(sql);
		if(SQLType.SELECT.equals(sqlType) || SQLType.DESC.equals(sqlType) || SQLType.SHOW.equals(sqlType)) {
			executeQuery(sql);
			return true;
		}else if(SQLType.INSERT.equals(sqlType) || SQLType.UPDATE.equals(sqlType) || SQLType.DELETE.equals(sqlType)) {
			if(autoGeneratedKeys != -1) {
				this.updateCount = executeUpdate(sql, autoGeneratedKeys);
			}else if(columnIndexes != null) {
				this.updateCount = executeUpdate(sql, columnIndexes);
			}else if(columnNames != null) {
				this.updateCount = executeUpdate(sql, columnNames);
			}else {
				this.updateCount = executeUpdate(sql);
			}
			return true;
		}else {
			throw new SQLException("unsupported sql");
		}
	}
	
	@Override
	public ResultSet getResultSet() throws SQLException {
		return resultSet;
	}
	
	protected void setResultSet(ResultSet resultSet) {
		this.resultSet = resultSet;
	}

	@SuppressWarnings("unchecked")
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		try {
			return (T) this;
		} catch (Exception e) {
			e.printStackTrace();
			throw new SQLException(e);
		}
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		if(super.getClass().isAssignableFrom(iface)) {
			return true;
		}
		return false;
	}

	@Override
	public void close() throws SQLException {
		if(log.isDebugEnabled()) {
			log.debug("{} is closed.", this);
		}
		this.closed = true;
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public int getMaxRows() throws SQLException {
		return this.maxRows;
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		this.maxRows = max;
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return this.queryTimeout;
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		this.queryTimeout = seconds;
	}

	@Override
	public void cancel() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void clearWarnings() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return this.updateCount;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return this.moreResults;
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		this.fetchSize = rows;
	}

	@Override
	public int getFetchSize() throws SQLException {
		return this.fetchSize;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return this.resultSetConcurrency;
	}

	@Override
	public int getResultSetType() throws SQLException {
		return this.resultSetType;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return this.resultSetHoldability;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return this.closed;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public boolean isPoolable() throws SQLException {
		throw new SQLException("unsupported operation");
	}
	
	public String getDbName() {
		return dbName;
	}

	public void setDbName(String dbName) {
		this.dbName = dbName;
	}
	public ConnectionManager getManager() {
		return manager;
	}
	public void setManager(ConnectionManager manager) {
		this.manager = manager;
	}
	public void setResultSetConcurrency(int resultSetConcurrency) {
		this.resultSetConcurrency = resultSetConcurrency;
	}
	public void setResultSetType(int resultSetType) {
		this.resultSetType = resultSetType;
	}
	public void setResultSetHoldability(int resultSetHoldability) {
		this.resultSetHoldability = resultSetHoldability;
	}
	
	public void closeOnCompletion() throws SQLException {
		this.closeOnCompletion = true;
	}

	public boolean isCloseOnCompletion() throws SQLException {
		return this.closeOnCompletion;
	}

}
