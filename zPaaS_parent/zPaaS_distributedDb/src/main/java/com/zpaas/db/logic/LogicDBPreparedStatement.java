package com.zpaas.db.logic;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.zpaas.db.sql.SQLType;

/**
 * 逻辑库的PreparedStatement类
 * @author zjy
 * @date 2014年6月23日 上午9:58:18 
 * @version V1.0
 */
public class LogicDBPreparedStatement  extends LogicDBStatement implements PreparedStatement {
	public static final Logger log = LoggerFactory.getLogger(LogicDBPreparedStatement.class);
	
	private Map<Integer, Integer> typeMap = new HashMap<Integer,Integer>();
	private Map<Integer,Object> valueMap = new HashMap<Integer,Object>();
	private String sql;
	private int autoGeneratedKeys = -1;
	private int[] columnIndexes;
	private String[] columnNames;
	
	public LogicDBPreparedStatement(String sql) {
		super();
		this.setSql(sql);
	}
	
	@Override
	public boolean execute() throws SQLException {
		if(this.isClosed()) {
			return false;
		}
		String sqlType = SQLType.getSqlType(sql);
		if(SQLType.SELECT.equals(sqlType)) {
			this.setResultSet(executeQuery());
			return true;
		}else{
			this.updateCount = executeUpdate();
			return true;
		}
	}

	@Override
	public void addBatch() throws SQLException {
		
	}
	
	@Override
	public int[] executeBatch() throws SQLException {
		
		return super.executeBatch();
	}
	
	@Override
	public ResultSet executeQuery() throws SQLException {
		if(this.isClosed()) {
			return null;
		}
		this.processDbRule(sql);
		
		Connection conn = getRealConnection(getDbName());
		PreparedStatement ps = null;
		if(this.autoGeneratedKeys != -1) {
			ps = conn.prepareStatement(getSql(), this.autoGeneratedKeys);
		}else if(this.columnIndexes != null && this.columnIndexes.length > 0) {
			ps = conn.prepareStatement(getSql(), this.columnIndexes);
		}else if(this.columnNames != null && this.columnNames.length > 0) {
			ps = conn.prepareStatement(getSql(), this.columnNames);
		}else if(this.getResultSetType() != -1 && this.getResultSetConcurrency() != -1 && this.getResultSetHoldability() != -1) {
			ps = conn.prepareStatement(getSql(),this.getResultSetType(), this.getResultSetConcurrency(),this.getResultSetHoldability());
		}else if(this.getResultSetType() != -1 && this.getResultSetConcurrency() != -1) {
			ps = conn.prepareStatement(getSql(),this.getResultSetType(), this.getResultSetConcurrency());
		}else {
			ps = conn.prepareStatement(getSql());
		}
		manager.addStatement(ps);
		for(Integer key : this.valueMap.keySet()) {
			int type = this.typeMap.get(key);
			if (type == Types.BINARY) {
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setBinaryStream(key, (InputStream) value.get("value"), (Long) len);
				} else {
					ps.setBinaryStream(key, (InputStream) valueMap.get(key));
				}
			} else if (type == Types.NCLOB) {
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setNClob(key, (Reader) value.get("value"), (Long) len);
				} else {
					if(valueMap.get(key) instanceof Reader){
						ps.setNClob(key, (Reader) valueMap.get(key));
					} else {
						ps.setNClob(key, (NClob) valueMap.get(key));
					}
				}
			} else if (type == Types.NCHAR) {
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setNCharacterStream(key, (Reader) value.get("value"), (Long) len);
				} else {
					ps.setNCharacterStream(key, (Reader) valueMap.get(key));
				}
			} else if (type == Types.CLOB) {
				
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					if(value.get("value") instanceof InputStream){
						ps.setAsciiStream(key, (InputStream) value.get("value"), (Long) len);
					} else {
						ps.setClob(key, (Reader) value.get("value"), (Long) len);
					}
				} else {
					if(valueMap.get(key) instanceof Reader){
						ps.setClob(key, (Reader) valueMap.get(key));
					} if(valueMap.get(key) instanceof InputStream){
						ps.setAsciiStream(key, (InputStream) valueMap.get(key));
					} else {
						ps.setClob(key, (Clob) valueMap.get(key));
					}
				}
			}  else if (type == Types.BLOB) {				
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setBlob(key, (InputStream) value.get("value"), (Long) len);
				} else {
					if(valueMap.get(key) instanceof InputStream){
						ps.setBlob(key, (InputStream)valueMap.get(key));
					} else {
						ps.setBlob(key, (Blob) valueMap.get(key));
					}
				}
			} else {
				ps.setObject(key, this.valueMap.get(key));
			}
		}
		long beginTime = System.currentTimeMillis();
		ResultSet rs = ps.executeQuery();
		long endTime = System.currentTimeMillis();
		if(log.isDebugEnabled()) {
			log.debug("dbName({}) cost {} ms to execute sql: {}",getDbName(), (endTime-beginTime), getSql());
			log.debug(this.valueMap.toString());
		}
		return rs;
	}
	
	@Override
	public int executeUpdate() throws SQLException {
		if(this.isClosed()) {
			return -1;
		}
		this.processDbRule(sql);
		Connection conn = getRealConnection(getDbName());
		PreparedStatement ps = null;
		if(this.autoGeneratedKeys != -1) {
			ps = conn.prepareStatement(getSql(), this.autoGeneratedKeys);
		}else if(this.columnIndexes != null && this.columnIndexes.length > 0) {
			ps = conn.prepareStatement(getSql(), this.columnIndexes);
		}else if(this.columnNames != null && this.columnNames.length > 0) {
			ps = conn.prepareStatement(getSql(), this.columnNames);
		}else if(this.getResultSetType() != -1 && this.getResultSetConcurrency() != -1 && this.getResultSetHoldability() != -1) {
			ps = conn.prepareStatement(getSql(),this.getResultSetType(), this.getResultSetConcurrency(),this.getResultSetHoldability());
		}else if(this.getResultSetType() != -1 && this.getResultSetConcurrency() != -1) {
			ps = conn.prepareStatement(getSql(),this.getResultSetType(), this.getResultSetConcurrency());
		}else {
			ps = conn.prepareStatement(getSql());
		}
		manager.addStatement(ps);
		for (Integer key : this.valueMap.keySet()) {
			int type = this.typeMap.get(key);
			if (type == Types.BINARY) {
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setBinaryStream(key, (InputStream) value.get("value"), (Long) len);
				} else {
					ps.setBinaryStream(key, (InputStream) valueMap.get(key));
				}
			} else if (type == Types.NCLOB) {
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setNClob(key, (Reader) value.get("value"), (Long) len);
				} else {
					if(valueMap.get(key) instanceof Reader){
						ps.setNClob(key, (Reader) valueMap.get(key));
					} else {
						ps.setNClob(key, (NClob) valueMap.get(key));
					}
				}
			} else if (type == Types.NCHAR) {
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setNCharacterStream(key, (Reader) value.get("value"), (Long) len);
				} else {
					ps.setNCharacterStream(key, (Reader) valueMap.get(key));
				}
			} else if (type == Types.CLOB) {
				
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					if(value.get("value") instanceof InputStream){
						ps.setAsciiStream(key, (InputStream) value.get("value"), (Long) len);
					} else {
						ps.setClob(key, (Reader) value.get("value"), (Long) len);
					}
				} else {
					if(valueMap.get(key) instanceof Reader){
						ps.setClob(key, (Reader) valueMap.get(key));
					} if(valueMap.get(key) instanceof InputStream){
						ps.setAsciiStream(key, (InputStream) valueMap.get(key));
					} else {
						ps.setClob(key, (Clob) valueMap.get(key));
					}
				}
			}  else if (type == Types.BLOB) {				
				if(this.valueMap.get(key) instanceof Map<?, ?>) {
					@SuppressWarnings("unchecked")
					Map<String, Object> value = (Map<String, Object>) this.valueMap.get(key);
					Object len = value.get("length");
					ps.setBlob(key, (InputStream) value.get("value"), (Long) len);
				} else {
					if(valueMap.get(key) instanceof InputStream){
						ps.setBlob(key, (InputStream)valueMap.get(key));
					} else {
						ps.setBlob(key, (Blob) valueMap.get(key));
					}
				}
			} else {
				ps.setObject(key, this.valueMap.get(key));
			}
		}
		long beginTime = System.currentTimeMillis();
		int i = ps.executeUpdate();
		long endTime = System.currentTimeMillis();
		if(log.isDebugEnabled()) {
			log.debug("{} records were updated. dbName({}) cost {} ms to execute sql: {}",i ,getDbName(), (endTime-beginTime), getSql());
			log.debug(this.valueMap.toString());
		}
		return i;
	}
	
	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		typeMap.put(parameterIndex, Types.OTHER);
		valueMap.put(parameterIndex, x);
	}
	
	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		typeMap.put(parameterIndex, Types.ROWID);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setNString(int parameterIndex, String value)
			throws SQLException {
		typeMap.put(parameterIndex, Types.NVARCHAR);
		valueMap.put(parameterIndex, value);
	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		typeMap.put(parameterIndex, Types.REF);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		typeMap.put(parameterIndex, Types.BLOB);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		typeMap.put(parameterIndex, Types.ARRAY);
		valueMap.put(parameterIndex, x);
	}
	
	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		typeMap.put(parameterIndex, sqlType);
		valueMap.put(parameterIndex, null);
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		typeMap.put(parameterIndex, Types.BOOLEAN);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		typeMap.put(parameterIndex, Types.TINYINT);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		typeMap.put(parameterIndex, Types.SMALLINT);
		valueMap.put(parameterIndex, x);
	}

	

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x)
			throws SQLException {
		typeMap.put(parameterIndex, Types.TIMESTAMP);
		valueMap.put(parameterIndex, x);
	}
	
	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		typeMap.put(parameterIndex, Types.INTEGER);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		typeMap.put(parameterIndex, Types.BIGINT);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		typeMap.put(parameterIndex, Types.FLOAT);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		typeMap.put(parameterIndex, Types.DOUBLE);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x)
			throws SQLException {
		typeMap.put(parameterIndex, Types.DECIMAL);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		typeMap.put(parameterIndex, Types.VARCHAR);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		typeMap.put(parameterIndex, Types.DATE);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		typeMap.put(parameterIndex, Types.TIME);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", x);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", x);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		typeMap.put(parameterIndex, Types.BINARY);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", x);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void clearParameters() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", reader);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		typeMap.put(parameterIndex, Types.NCHAR);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", reader);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		typeMap.put(parameterIndex, Types.NCLOB);
		valueMap.put(parameterIndex, value);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", reader);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		typeMap.put(parameterIndex, Types.BLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", inputStream);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		typeMap.put(parameterIndex, Types.NCLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", reader);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		throw new SQLException("unsupported operation");
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", x);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		typeMap.put(parameterIndex, Types.BINARY);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", x);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
        Map<String,Object> value=new HashMap<String,Object>();
        value.put("value", reader);
        value.put("length", length);
        valueMap.put(parameterIndex, value);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		typeMap.put(parameterIndex, Types.BINARY);
		valueMap.put(parameterIndex, x);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		typeMap.put(parameterIndex, Types.NCLOB);
		valueMap.put(parameterIndex, reader);
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		typeMap.put(parameterIndex, Types.NCHAR);
		valueMap.put(parameterIndex, value);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		typeMap.put(parameterIndex, Types.CLOB);
		valueMap.put(parameterIndex, reader);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		typeMap.put(parameterIndex, Types.BLOB);
		valueMap.put(parameterIndex, inputStream);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		typeMap.put(parameterIndex, Types.NCLOB);
		valueMap.put(parameterIndex, reader);
	}
	
	protected String getSql() {
		return sql;
	}

	protected void setSql(String sql) {
		this.sql = sql;
	}

	public int getAutoGeneratedKeys() {
		return autoGeneratedKeys;
	}

	public void setAutoGeneratedKeys(int autoGeneratedKeys) {
		this.autoGeneratedKeys = autoGeneratedKeys;
	}

	public int[] getColumnIndexes() {
		return columnIndexes;
	}

	public void setColumnIndexes(int[] columnIndexes) {
		this.columnIndexes = columnIndexes;
	}

	public String[] getColumnNames() {
		return columnNames;
	}

	public void setColumnNames(String[] columnNames) {
		this.columnNames = columnNames;
	}
}
